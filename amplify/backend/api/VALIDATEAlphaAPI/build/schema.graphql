type User {
  id: ID!
  username: String!
  email: String
  companies(filter: ModelCompanyFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCompanyConnection
  demographics: Demographics
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Company {
  id: ID!
  name: String!
  userID: ID!
  manager: User
  forms(filter: ModelFormFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFormConnection
  description: String
  tags: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Form {
  id: ID!
  companyID: ID!
  title: String
  description: String
  isPrivate: Boolean
  company: Company
  tags: AWSJSON
  validations: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type FormSubmission {
  id: ID!
  formID: ID!
  form: Form
  answers: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Demographics {
  id: ID!
  userID: ID!
  firstName: String
  lastName: String
  birthday: String
  sex: String
  gender: String
  household: String
  maritalStatus: String
  city: String
  state: String
  country: String
  income: String
  homeowner: String
  education: String
  profession: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getCompany(id: ID!): Company
  listCompanys(filter: ModelCompanyFilterInput, limit: Int, nextToken: String): ModelCompanyConnection
  getForm(id: ID!): Form
  listForms(filter: ModelFormFilterInput, limit: Int, nextToken: String): ModelFormConnection
  getFormSubmission(id: ID!): FormSubmission
  listFormSubmissions(filter: ModelFormSubmissionFilterInput, limit: Int, nextToken: String): ModelFormSubmissionConnection
  getDemographics(id: ID!): Demographics
  listDemographicss(filter: ModelDemographicsFilterInput, limit: Int, nextToken: String): ModelDemographicsConnection
}

input CreateUserInput {
  id: ID
  username: String!
  email: String
  userDemographicsId: ID
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  userDemographicsId: ID
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createCompany(input: CreateCompanyInput!, condition: ModelCompanyConditionInput): Company
  updateCompany(input: UpdateCompanyInput!, condition: ModelCompanyConditionInput): Company
  deleteCompany(input: DeleteCompanyInput!, condition: ModelCompanyConditionInput): Company
  createForm(input: CreateFormInput!, condition: ModelFormConditionInput): Form
  updateForm(input: UpdateFormInput!, condition: ModelFormConditionInput): Form
  deleteForm(input: DeleteFormInput!, condition: ModelFormConditionInput): Form
  createFormSubmission(input: CreateFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  updateFormSubmission(input: UpdateFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  deleteFormSubmission(input: DeleteFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  createDemographics(input: CreateDemographicsInput!, condition: ModelDemographicsConditionInput): Demographics
  updateDemographics(input: UpdateDemographicsInput!, condition: ModelDemographicsConditionInput): Demographics
  deleteDemographics(input: DeleteDemographicsInput!, condition: ModelDemographicsConditionInput): Demographics
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCompany: Company @aws_subscribe(mutations: ["createCompany"])
  onUpdateCompany: Company @aws_subscribe(mutations: ["updateCompany"])
  onDeleteCompany: Company @aws_subscribe(mutations: ["deleteCompany"])
  onCreateForm: Form @aws_subscribe(mutations: ["createForm"])
  onUpdateForm: Form @aws_subscribe(mutations: ["updateForm"])
  onDeleteForm: Form @aws_subscribe(mutations: ["deleteForm"])
  onCreateFormSubmission: FormSubmission @aws_subscribe(mutations: ["createFormSubmission"])
  onUpdateFormSubmission: FormSubmission @aws_subscribe(mutations: ["updateFormSubmission"])
  onDeleteFormSubmission: FormSubmission @aws_subscribe(mutations: ["deleteFormSubmission"])
  onCreateDemographics: Demographics @aws_subscribe(mutations: ["createDemographics"])
  onUpdateDemographics: Demographics @aws_subscribe(mutations: ["updateDemographics"])
  onDeleteDemographics: Demographics @aws_subscribe(mutations: ["deleteDemographics"])
}

type ModelCompanyConnection {
  items: [Company]
  nextToken: String
}

input ModelCompanyFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  userID: ModelIDInput
  description: ModelStringInput
  tags: ModelStringInput
  and: [ModelCompanyFilterInput]
  or: [ModelCompanyFilterInput]
  not: ModelCompanyFilterInput
}

input CreateCompanyInput {
  id: ID
  name: String!
  userID: ID!
  description: String
  tags: AWSJSON
  companyManagerId: ID
}

input UpdateCompanyInput {
  id: ID!
  name: String
  userID: ID
  description: String
  tags: AWSJSON
  companyManagerId: ID
}

input DeleteCompanyInput {
  id: ID!
}

input ModelCompanyConditionInput {
  name: ModelStringInput
  userID: ModelIDInput
  description: ModelStringInput
  tags: ModelStringInput
  and: [ModelCompanyConditionInput]
  or: [ModelCompanyConditionInput]
  not: ModelCompanyConditionInput
}

type ModelFormConnection {
  items: [Form]
  nextToken: String
}

input ModelFormFilterInput {
  id: ModelIDInput
  companyID: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  isPrivate: ModelBooleanInput
  tags: ModelStringInput
  validations: ModelStringInput
  and: [ModelFormFilterInput]
  or: [ModelFormFilterInput]
  not: ModelFormFilterInput
}

input CreateFormInput {
  id: ID
  companyID: ID!
  title: String
  description: String
  isPrivate: Boolean
  tags: AWSJSON
  validations: AWSJSON
}

input UpdateFormInput {
  id: ID!
  companyID: ID
  title: String
  description: String
  isPrivate: Boolean
  tags: AWSJSON
  validations: AWSJSON
}

input DeleteFormInput {
  id: ID!
}

input ModelFormConditionInput {
  companyID: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  isPrivate: ModelBooleanInput
  tags: ModelStringInput
  validations: ModelStringInput
  and: [ModelFormConditionInput]
  or: [ModelFormConditionInput]
  not: ModelFormConditionInput
}

type ModelFormSubmissionConnection {
  items: [FormSubmission]
  nextToken: String
}

input ModelFormSubmissionFilterInput {
  id: ModelIDInput
  formID: ModelIDInput
  answers: ModelStringInput
  and: [ModelFormSubmissionFilterInput]
  or: [ModelFormSubmissionFilterInput]
  not: ModelFormSubmissionFilterInput
}

input CreateFormSubmissionInput {
  id: ID
  formID: ID!
  answers: AWSJSON
}

input UpdateFormSubmissionInput {
  id: ID!
  formID: ID
  answers: AWSJSON
}

input DeleteFormSubmissionInput {
  id: ID!
}

input ModelFormSubmissionConditionInput {
  formID: ModelIDInput
  answers: ModelStringInput
  and: [ModelFormSubmissionConditionInput]
  or: [ModelFormSubmissionConditionInput]
  not: ModelFormSubmissionConditionInput
}

type ModelDemographicsConnection {
  items: [Demographics]
  nextToken: String
}

input ModelDemographicsFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  birthday: ModelStringInput
  sex: ModelStringInput
  gender: ModelStringInput
  household: ModelStringInput
  maritalStatus: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  country: ModelStringInput
  income: ModelStringInput
  homeowner: ModelStringInput
  education: ModelStringInput
  profession: ModelStringInput
  and: [ModelDemographicsFilterInput]
  or: [ModelDemographicsFilterInput]
  not: ModelDemographicsFilterInput
}

input CreateDemographicsInput {
  id: ID
  userID: ID!
  firstName: String
  lastName: String
  birthday: String
  sex: String
  gender: String
  household: String
  maritalStatus: String
  city: String
  state: String
  country: String
  income: String
  homeowner: String
  education: String
  profession: String
}

input UpdateDemographicsInput {
  id: ID!
  userID: ID
  firstName: String
  lastName: String
  birthday: String
  sex: String
  gender: String
  household: String
  maritalStatus: String
  city: String
  state: String
  country: String
  income: String
  homeowner: String
  education: String
  profession: String
}

input DeleteDemographicsInput {
  id: ID!
}

input ModelDemographicsConditionInput {
  userID: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  birthday: ModelStringInput
  sex: ModelStringInput
  gender: ModelStringInput
  household: ModelStringInput
  maritalStatus: ModelStringInput
  city: ModelStringInput
  state: ModelStringInput
  country: ModelStringInput
  income: ModelStringInput
  homeowner: ModelStringInput
  education: ModelStringInput
  profession: ModelStringInput
  and: [ModelDemographicsConditionInput]
  or: [ModelDemographicsConditionInput]
  not: ModelDemographicsConditionInput
}
